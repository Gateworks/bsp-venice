#
# U-Boot environment for Gateworks Venice
#

# misc config
bootdelay=5
baudrate=115200
console=ttymxc1,115200 earlycon=ec_imx6q,0x30890000,115200
bootargs=net.ifnames=0
arch=arm
cpu=armv8
soc=imx8m
vendor=gateworks
board=venice
board_name=venice
dir=venice
dev=2
preboot=gsc wd-disable; gsc thermal enable 96

# configure addrs friendly for 1GiB min DRAM allowing 128MB of kernel
loadaddr=0x48200000
kernel_addr_r=0x48200000
fdt_addr_r=0x50200000
scriptaddr=0x50280000
ramdisk_addr_r=0x50300000
kernel_comp_addr_r=0x40200000

# generic distro config
bootcmd=run distro_bootcmd
distro_bootcmd=\
	setenv nvme_need_init; \
	for target in ${boot_targets}; do \
		run bootcmd_${target}; \
	done
boot_a_script=\
	load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${prefix}${script}; \
	source ${scriptaddr}
boot_efi_binary=\
	load ${devtype} ${devnum}:${distro_bootpart} ${kernel_addr_r} efi/boot/bootaa64.efi; \
	if fdt addr -q ${fdt_addr_r}; then \
		bootefi ${kernel_addr_r} ${fdt_addr_r}; \
	else \
		bootefi ${kernel_addr_r} ${fdtcontroladdr}; \
	fi
boot_efi_bootmgr=\
	if fdt addr -q ${fdt_addr_r}; then \
		bootefi bootmgr ${fdt_addr_r};\
	else \
		bootefi bootmgr;\
	fi
scan_dev_for_boot=\
	echo Scanning ${devtype} ${devnum}:${distro_bootpart}...; \
	for prefix in ${boot_prefixes}; do \
		run scan_dev_for_extlinux; \
		run scan_dev_for_scripts; \
	done;\
	run scan_dev_for_efi;
scan_dev_for_boot_part=\
	part list ${devtype} ${devnum} -bootable devplist; \
	env exists devplist || setenv devplist 1; \
	for distro_bootpart in ${devplist}; do \
		if fstype ${devtype} ${devnum}:${distro_bootpart} bootfstype; then \
			part uuid ${devtype} ${devnum}:${distro_bootpart} distro_bootpart_uuid; \
			run scan_dev_for_boot; \
		fi; \
	done; \
	setenv devplist
efi_dtb_prefixes=/ /dtb/ /dtb/current/
load_efi_dtb=\
	load ${devtype} ${devnum}:${distro_bootpart} ${fdt_addr_r} ${prefix}${efi_fdtfile}
scan_dev_for_efi=\
	setenv efi_fdtfile ${fdtfile}; \
	for prefix in ${efi_dtb_prefixes}; do \
		if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${efi_fdtfile}; then \
			run load_efi_dtb; \
		fi; \
	done;\
	run boot_efi_bootmgr;\
	if test -e ${devtype} ${devnum}:${distro_bootpart} efi/boot/bootaa64.efi; then \
		echo Found EFI removable media binary efi/boot/bootaa64.efi; \
		run boot_efi_binary; \
		echo EFI LOAD FAILED: continuing...; \
	fi; \
	setenv efi_fdtfile
scan_dev_for_scripts=\
	for script in ${boot_scripts}; do \
		if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${script}; then \
			echo Found U-Boot script ${prefix}${script}; \
			run boot_a_script; \
			echo SCRIPT FAILED: continuing...; \
		fi; \
	done
# list of boot targets searched
boot_targets=mmc1 mmc2 usb0 usb1 nvme0 dhcp
# list of dirs within a partition that are searched for for boot scripts
boot_prefixes=/ /boot/
# list of boot script filenames to search for
boot_scripts=boot.scr
# DHCP
boot_script_dhcp=boot.scr.uimg
# PXE
boot_net_usb_start=usb start
boot_pci_enum=pci enum
bootcmd_dhcp=\
	devtype=dhcp; \
	run boot_net_usb_start; \
	run boot_pci_enum; \
	if dhcp ${scriptaddr} ${boot_script_dhcp}; then \
		source ${scriptaddr}; \
	fi; \
	setenv efi_fdtfile ${fdtfile}; \
	setenv efi_old_vci ${bootp_vci}; \
	setenv efi_old_arch ${bootp_arch}; \
	setenv bootp_vci PXEClient:Arch:00011:UNDI:003000; \
	setenv bootp_arch 0xb; \
	if dhcp ${kernel_addr_r}; then \
		tftpboot ${fdt_addr_r} dtb/${efi_fdtfile}; \
		if fdt addr -q ${fdt_addr_r}; then \
			bootefi ${kernel_addr_r} ${fdt_addr_r}; \
		else \
			bootefi ${kernel_addr_r} ${fdtcontroladdr}; \
		fi; \
	fi; \
	setenv bootp_vci ${efi_old_vci}; \
	setenv bootp_arch ${efi_old_arch}; \
	setenv efi_fdtfile; \
	setenv efi_old_arch; \
	setenv efi_old_vci;
# MMC
mmc_boot=\
	if mmc dev ${devnum}; then \
		devtype=mmc; \
		run scan_dev_for_boot_part; \
	fi
bootcmd_mmc1=devnum=1; run mmc_boot
bootcmd_mmc2=devnum=2; run mmc_boot
# USB
bootcmd_usb0=devnum=0; run usb_boot
bootcmd_usb1=devnum=1; run usb_boot
usb_boot=\
	usb start; \
	if usb dev ${devnum}; then \
		devtype=usb; \
		run scan_dev_for_boot_part; \
	fi
# NVME
bootcmd_nvme0=devnum=0; run nvme_boot
nvme_init=\
	if ${nvme_need_init}; then \
		setenv nvme_need_init false; \
		nvme scan; \
	fi
nvme_boot=\
	run boot_pci_enum; \
	run nvme_init; \
	if nvme dev ${devnum}; then \
		devtype=nvme; \
		run scan_dev_for_boot_part; \
	fi
# syslinux
scan_dev_for_extlinux=\
	if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${boot_syslinux_conf}; then \
		echo Found ${prefix}${boot_syslinux_conf}; \
		run boot_extlinux; \
		echo EXTLINUX FAILED: continuing...; \
	fi
boot_extlinux=\
	sysboot ${devtype} ${devnum}:${distro_bootpart} any ${scriptaddr} ${prefix}${boot_syslinux_conf}
boot_syslinux_conf=extlinux/extlinux.conf

# Firmware Update helpers (set dev/image prior to calling)
ipaddr=192.168.1.1
serverip=192.168.1.146
ethprime=eth0
ethrotate=no
autoload=no
# update boot firmare of $dev with $image (flash.bin)
update_firmware=\
	tftpboot $loadaddr $dir/venice-$soc-flash.bin && \
	setexpr blkcnt $filesize + 0x1ff && \
	setexpr blkcnt $blkcnt / 0x200 && \
	mmc dev $dev $bootpart && \
	mmc write $loadaddr $bootblk $blkcnt
# update 16MB+ of $dev with compressed $image
update_rootfs=\
	tftpboot $loadaddr $image && \
	gzwrite mmc $dev $loadaddr $filesize 100000 1000000
# update entire $dev with compressed $image
update_all=\
	tftpboot $loadaddr $image && \
	gzwrite mmc $dev $loadaddr $filesize
# restore env to default (env is 64K at 4032K and backup is at 3968K)
restore_env=\
	mmc dev $dev $bootpart && \
	mmc read $loadaddr 0x1f00 0x80 && \
	mmc write $loadaddr 0x1f80 0x80

# useful network boot commands (set bootargs/image before running)
boot_net=\
	setenv fsload tftpboot; \
	run loadfdt && \
	run apply_overlays && \
	$fsload $kernel_addr_r venice/Image && \
	booti $kernel_addr_r - $fdt_addr_r
loadfdt=\
	if $fsload $fdt_addr_r $dir/$fdt_file1; then \
		echo loaded $fdt_file1; \
	elif $fsload $fdt_addr_r $dir/$fdt_file2; then \
		echo loaded $fdt_file2; \
	elif $fsload $fdt_addr_r $dir/$fdt_file3; then \
		echo loaded $fdt_file3; \
	elif $fsload $fdt_addr_r $dir/$fdt_file4; then \
		echo loaded $fdt_file4; \
	elif $fsload $fdt_addr_r $dir/$fdt_file5; then \
		echo loaded $fdt_file5; \
	fi
apply_overlays=\
	fdt addr $fdt_addr_r && \
	for i in "$fdt_overlays"; do \
		$fsload $loadaddr $dir/$i && \
		fdt resize $filesize && \
		fdt apply $loadaddr && \
		echo applied $dir/$i; \
	done
